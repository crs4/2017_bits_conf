#!/bin/bash

set -o errexit
set -o nounset

CollectionBaseDir=~cesco/dump/sar_data
#SarOpts="-bS -n ALL -r ALL -u ALL" -r ALL is only supported in newer versions of sar
SarOpts="-brS -n ALL -u ALL"
SarFreq="30" # sampling interval in seconds

FilePrefix="${CollectionBaseDir}/${HOSTNAME}_sar_start"
PidFile="${CollectionBaseDir}/${HOSTNAME}_sar.pid"

function log() {
  echo "${@}" >&2
  return 0
}

function create_pid_file() {
  local pid_file="${1}"
  if ! (set -o noclobber; > "${pid_file}") ; then
    log "Sar PID file already exists for this host (${pid_file})"
    log "You may have already started sar.  Else you need to remove file"
    exit 1
  fi
  return 0
}

function is_running() {
  local pid_file="${1}"
  pid="$(cat "${pid_file}")"
  if [ -z "${pid}" ]; then
    log "There is a problem. The PID file ${PidFile} is empty"
    return 1
  fi
  local proc_name="$(ps --pid "${pid}" --format comm --no-headers)"
  local ps_result=$?
  if [ ${ps_result} -eq 0 ]; then
    log "Found process with matching PID ${pid} and proc name '${proc_name}'"
  fi
  if [ ${ps_result} -eq 0 -a "${proc_name}" == sar ]; then
    return 0
  else
    return 1
  fi
}

function spawn_sar() {
  local data_file="${1}"
  local pid_file="${2}"
  setsid bash -c "sar ${SarOpts} -o '${data_file}' ${SarFreq} >/dev/null 2> '${data_file}.err' </dev/null & echo \$! > '${pid_file}'; disown %1"
  log "sar command lauched "
  sleep 1
  pid="$(cat "${pid_file}")"
  if [ -z "${pid}" ]; then
    log "There is a problem. The PID file ${pid_file} is still empty but it should contain the new process' ID"
    exit 1
  fi
  if is_running "${pid_file}" ; then
    log "Sar running under process ${pid} and writing to ${data_file}"
  else
    log "There seems to be a problem. Found ${pid} in PID file but I can't find sar"
    exit 1
  fi
  return 0
}

function stop_sar() {
  local pid_file="${1}"
  pid="$(cat "${pid_file}")"
  if [ -z "${pid}" ]; then
    log "PID file is empty! (${pid_file})"
    exit 1
  fi
  if is_running "${pid_file}" ; then
    log "sar running under process ${pid}. Stopping..."
    kill -TERM ${pid}
    sleep 2
    if ! is_running "${pid_file}"; then
      log "Process ${pid} is no longer running. Removing PID file ."
      rm -f "${pid_file}"
      log "Removed PID file ${pid_file}"
    fi
  else
    log "There seems to be a problem. Found ${pid} in PID file but I can't find sar"
    exit 1
  fi
  return 0
}

function usage_error() {
  echo "Usage: $(basename $0) [start | stop]" >&2
  exit 1
}

############### main ##############

if [ $# -ne 1 ]; then
  usage_error
fi

cmd="${1}"
case "${cmd}" in
start)
  mkdir -p "${CollectionBaseDir}"
  log "Creating PID file ${PidFile}"
  create_pid_file "${PidFile}"
  DataFile="${FilePrefix}_$(date +'%F_%T').sar"
  log "Spawing sar..."
  spawn_sar "${DataFile}" "${PidFile}"
  log "Process spawned. sar running with PID $(cat ${PidFile}) and writing data to ${DataFile}"
  ;;
stop)
  if is_running "${PidFile}"; then
    stop_sar "${PidFile}"
  else
    log "Sar doesn't seem to be running on this host"
    exit 2
  fi
  ;;
*)
  usage_error
  ;;
esac

exit 0
